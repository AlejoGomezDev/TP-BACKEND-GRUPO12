1. Obtener todas las películas (GET)
Frontend:

javascript
Copiar código
fetch('/api/peliculas')
  .then(response => response.json())
  .then(data => {
    // Usar los datos para actualizar el frontend
  })
  .catch(error => console.error('Error:', error));
Backend:

javascript
Copiar código
app.get('/api/peliculas', (req, res) => {
  const sql = 'SELECT * FROM peliculas';
  db.query(sql, (err, result) => {
    if (err) throw err;
    res.json(result);
  });
});
2. Registrar un nuevo usuario (POST)
Frontend:

javascript
Copiar código
function registrarUsuario(nombre, email, contraseña) {
  fetch('/api/usuarios', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ nombre, email, contraseña })
  })
  .then(response => response.json())
  .then(data => {
    // Manejar la respuesta
    console.log('Usuario registrado:', data);
  })
  .catch(error => console.error('Error:', error));
}

// Ejemplo de uso:
registrarUsuario('Nombre', 'email@example.com', 'contraseña123');
Backend:

javascript
Copiar código
app.post('/api/usuarios', (req, res) => {
  const { nombre, email, contraseña } = req.body;
  const sql = 'INSERT INTO usuarios (nombre, email, contraseña) VALUES (?, ?, ?)';
  db.query(sql, [nombre, email, contraseña], (err, result) => {
    if (err) throw err;
    res.json({ id: result.insertId, nombre, email });
  });
});
3. Editar información del usuario (PUT)
Frontend:

javascript
Copiar código
function editarUsuario(id, nombre, email, contraseña) {
  fetch(`/api/usuarios/${id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ nombre, email, contraseña })
  })
  .then(response => response.json())
  .then(data => {
    // Manejar la respuesta
    console.log('Usuario actualizado:', data);
  })
  .catch(error => console.error('Error:', error));
}

// Ejemplo de uso:
editarUsuario(1, 'Nuevo Nombre', 'nuevoemail@example.com', 'nuevacontraseña123');
Backend:

javascript
Copiar código
app.put('/api/usuarios/:id', (req, res) => {
  const { id } = req.params;
  const { nombre, email, contraseña } = req.body;
  const sql = 'UPDATE usuarios SET nombre = ?, email = ?, contraseña = ? WHERE id = ?';
  db.query(sql, [nombre, email, contraseña, id], (err, result) => {
    if (err) throw err;
    res.json({ id, nombre, email });
  });
});
4. Eliminar un comentario (DELETE)
Frontend:

javascript
Copiar código
function eliminarComentario(id) {
  fetch(`/api/comentarios/${id}`, {
    method: 'DELETE'
  })
  .then(response => response.json())
  .then(data => {
    // Manejar la respuesta
    console.log('Comentario eliminado:', data);
  })
  .catch(error => console.error('Error:', error));
}

// Ejemplo de uso:
eliminarComentario(1);
Backend:

javascript
Copiar código
app.delete('/api/comentarios/:id', (req, res) => {
  const { id } = req.params;
  const sql = 'DELETE FROM comentarios WHERE id = ?';
  db.query(sql, [id], (err, result) => {
    if (err) throw err;
    res.json({ message: 'Comentario eliminado', id });
  });
});
Resumen
GET para obtener todas las películas.
POST para registrar un nuevo usuario.
PUT para editar la información del usuario.
DELETE para eliminar un comentario.